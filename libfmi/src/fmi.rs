/* automatically generated by rust-bindgen 0.68.1 */

pub const fmi2TypesPlatform: &[u8; 8] = b"default\0";
pub const fmi2True: u32 = 1;
pub const fmi2False: u32 = 0;
pub const fmi2Version: &[u8; 4] = b"2.0\0";
pub type fmi2Component = *mut ::std::os::raw::c_void;
pub type fmi2ComponentEnvironment = *mut ::std::os::raw::c_void;
pub type fmi2FMUstate = *mut ::std::os::raw::c_void;
pub type fmi2ValueReference = ::std::os::raw::c_uint;
pub type fmi2Real = f64;
pub type fmi2Integer = ::std::os::raw::c_int;
pub type fmi2Boolean = ::std::os::raw::c_int;
pub type fmi2Char = ::std::os::raw::c_char;
pub type fmi2String = *const fmi2Char;
pub type fmi2Byte = ::std::os::raw::c_char;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum fmi2Status {
    fmi2OK = 0,
    fmi2Warning = 1,
    fmi2Discard = 2,
    fmi2Error = 3,
    fmi2Fatal = 4,
    fmi2Pending = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum fmi2Type {
    fmi2ModelExchange = 0,
    fmi2CoSimulation = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum fmi2StatusKind {
    fmi2DoStepStatus = 0,
    fmi2PendingStatus = 1,
    fmi2LastSuccessfulTime = 2,
    fmi2Terminated = 3,
}
pub type fmi2CallbackLogger = ::std::option::Option<
    unsafe extern "C" fn(
        componentEnvironment: fmi2ComponentEnvironment,
        instanceName: fmi2String,
        status: fmi2Status,
        category: fmi2String,
        message: fmi2String,
        ...
    ),
>;
pub type fmi2CallbackAllocateMemory = ::std::option::Option<
    unsafe extern "C" fn(nobj: usize, size: usize) -> *mut ::std::os::raw::c_void,
>;
pub type fmi2CallbackFreeMemory =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void)>;
pub type fmi2StepFinished = ::std::option::Option<
    unsafe extern "C" fn(componentEnvironment: fmi2ComponentEnvironment, status: fmi2Status),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fmi2CallbackFunctions {
    pub logger: fmi2CallbackLogger,
    pub allocateMemory: fmi2CallbackAllocateMemory,
    pub freeMemory: fmi2CallbackFreeMemory,
    pub stepFinished: fmi2StepFinished,
    pub componentEnvironment: fmi2ComponentEnvironment,
}
#[test]
fn bindgen_test_layout_fmi2CallbackFunctions() {
    const UNINIT: ::std::mem::MaybeUninit<fmi2CallbackFunctions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fmi2CallbackFunctions>(),
        40usize,
        concat!("Size of: ", stringify!(fmi2CallbackFunctions))
    );
    assert_eq!(
        ::std::mem::align_of::<fmi2CallbackFunctions>(),
        8usize,
        concat!("Alignment of ", stringify!(fmi2CallbackFunctions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2CallbackFunctions),
            "::",
            stringify!(logger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocateMemory) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2CallbackFunctions),
            "::",
            stringify!(allocateMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeMemory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2CallbackFunctions),
            "::",
            stringify!(freeMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stepFinished) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2CallbackFunctions),
            "::",
            stringify!(stepFinished)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentEnvironment) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2CallbackFunctions),
            "::",
            stringify!(componentEnvironment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fmi2EventInfo {
    pub newDiscreteStatesNeeded: fmi2Boolean,
    pub terminateSimulation: fmi2Boolean,
    pub nominalsOfContinuousStatesChanged: fmi2Boolean,
    pub valuesOfContinuousStatesChanged: fmi2Boolean,
    pub nextEventTimeDefined: fmi2Boolean,
    pub nextEventTime: fmi2Real,
}
#[test]
fn bindgen_test_layout_fmi2EventInfo() {
    const UNINIT: ::std::mem::MaybeUninit<fmi2EventInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fmi2EventInfo>(),
        32usize,
        concat!("Size of: ", stringify!(fmi2EventInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<fmi2EventInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(fmi2EventInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newDiscreteStatesNeeded) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2EventInfo),
            "::",
            stringify!(newDiscreteStatesNeeded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).terminateSimulation) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2EventInfo),
            "::",
            stringify!(terminateSimulation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).nominalsOfContinuousStatesChanged) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2EventInfo),
            "::",
            stringify!(nominalsOfContinuousStatesChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).valuesOfContinuousStatesChanged) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2EventInfo),
            "::",
            stringify!(valuesOfContinuousStatesChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextEventTimeDefined) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2EventInfo),
            "::",
            stringify!(nextEventTimeDefined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextEventTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fmi2EventInfo),
            "::",
            stringify!(nextEventTime)
        )
    );
}
#[doc = "Types for Common Functions"]
pub type fmi2GetTypesPlatformTYPE =
    ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
pub type fmi2GetVersionTYPE =
    ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
pub type fmi2SetDebugLoggingTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        loggingOn: fmi2Boolean,
        nCategories: usize,
        categories: *const fmi2String,
    ) -> fmi2Status,
>;
pub type fmi2InstantiateTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        instanceName: fmi2String,
        fmuType: fmi2Type,
        fmuGUID: fmi2String,
        fmuResourceLocation: fmi2String,
        functions: *const fmi2CallbackFunctions,
        visible: fmi2Boolean,
        loggingOn: fmi2Boolean,
    ) -> fmi2Component,
>;
pub type fmi2FreeInstanceTYPE = ::std::option::Option<unsafe extern "C" fn(c: fmi2Component)>;
pub type fmi2SetupExperimentTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        toleranceDefined: fmi2Boolean,
        tolerance: fmi2Real,
        startTime: fmi2Real,
        stopTimeDefined: fmi2Boolean,
        stopTime: fmi2Real,
    ) -> fmi2Status,
>;
pub type fmi2EnterInitializationModeTYPE =
    ::std::option::Option<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status>;
pub type fmi2ExitInitializationModeTYPE =
    ::std::option::Option<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status>;
pub type fmi2TerminateTYPE =
    ::std::option::Option<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status>;
pub type fmi2ResetTYPE =
    ::std::option::Option<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status>;
pub type fmi2GetRealTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *mut fmi2Real,
    ) -> fmi2Status,
>;
pub type fmi2GetIntegerTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *mut fmi2Integer,
    ) -> fmi2Status,
>;
pub type fmi2GetBooleanTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *mut fmi2Boolean,
    ) -> fmi2Status,
>;
pub type fmi2GetStringTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *mut fmi2String,
    ) -> fmi2Status,
>;
pub type fmi2SetRealTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *const fmi2Real,
    ) -> fmi2Status,
>;
pub type fmi2SetIntegerTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *const fmi2Integer,
    ) -> fmi2Status,
>;
pub type fmi2SetBooleanTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *const fmi2Boolean,
    ) -> fmi2Status,
>;
pub type fmi2SetStringTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *const fmi2String,
    ) -> fmi2Status,
>;
pub type fmi2GetFMUstateTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, FMUstate: *mut fmi2FMUstate) -> fmi2Status,
>;
pub type fmi2SetFMUstateTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, FMUstate: fmi2FMUstate) -> fmi2Status,
>;
pub type fmi2FreeFMUstateTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, FMUstate: *mut fmi2FMUstate) -> fmi2Status,
>;
pub type fmi2SerializedFMUstateSizeTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, FMUstate: fmi2FMUstate, size: *mut usize) -> fmi2Status,
>;
pub type fmi2SerializeFMUstateTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        FMUstate: fmi2FMUstate,
        serializedState: *mut fmi2Byte,
        size: usize,
    ) -> fmi2Status,
>;
pub type fmi2DeSerializeFMUstateTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        serializedState: *const fmi2Byte,
        size: usize,
        FMUstate: *mut fmi2FMUstate,
    ) -> fmi2Status,
>;
pub type fmi2GetDirectionalDerivativeTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vUnknown_ref: *const fmi2ValueReference,
        nUnknown: usize,
        vKnown_ref: *const fmi2ValueReference,
        nKnown: usize,
        dvKnown: *const fmi2Real,
        dvUnknown: *mut fmi2Real,
    ) -> fmi2Status,
>;
#[doc = "Types for Functions for FMI2 for Model Exchange"]
pub type fmi2EnterEventModeTYPE =
    ::std::option::Option<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status>;
pub type fmi2NewDiscreteStatesTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, fmi2eventInfo: *mut fmi2EventInfo) -> fmi2Status,
>;
pub type fmi2EnterContinuousTimeModeTYPE =
    ::std::option::Option<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status>;
pub type fmi2CompletedIntegratorStepTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        noSetFMUStatePriorToCurrentPoint: fmi2Boolean,
        enterEventMode: *mut fmi2Boolean,
        terminateSimulation: *mut fmi2Boolean,
    ) -> fmi2Status,
>;
pub type fmi2SetTimeTYPE =
    ::std::option::Option<unsafe extern "C" fn(c: fmi2Component, time: fmi2Real) -> fmi2Status>;
pub type fmi2SetContinuousStatesTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, x: *const fmi2Real, nx: usize) -> fmi2Status,
>;
pub type fmi2GetDerivativesTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, derivatives: *mut fmi2Real, nx: usize) -> fmi2Status,
>;
pub type fmi2GetEventIndicatorsTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, eventIndicators: *mut fmi2Real, ni: usize) -> fmi2Status,
>;
pub type fmi2GetContinuousStatesTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, x: *mut fmi2Real, nx: usize) -> fmi2Status,
>;
pub type fmi2GetNominalsOfContinuousStatesTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, x_nominal: *mut fmi2Real, nx: usize) -> fmi2Status,
>;
#[doc = "Types for Functions for FMI2 for Co-Simulation"]
pub type fmi2SetRealInputDerivativesTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        order: *const fmi2Integer,
        value: *const fmi2Real,
    ) -> fmi2Status,
>;
pub type fmi2GetRealOutputDerivativesTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        order: *const fmi2Integer,
        value: *mut fmi2Real,
    ) -> fmi2Status,
>;
pub type fmi2DoStepTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        currentCommunicationPoint: fmi2Real,
        communicationStepSize: fmi2Real,
        noSetFMUStatePriorToCurrentPoint: fmi2Boolean,
    ) -> fmi2Status,
>;
pub type fmi2CancelStepTYPE =
    ::std::option::Option<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status>;
pub type fmi2GetStatusTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, s: fmi2StatusKind, value: *mut fmi2Status) -> fmi2Status,
>;
pub type fmi2GetRealStatusTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, s: fmi2StatusKind, value: *mut fmi2Real) -> fmi2Status,
>;
pub type fmi2GetIntegerStatusTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        s: fmi2StatusKind,
        value: *mut fmi2Integer,
    ) -> fmi2Status,
>;
pub type fmi2GetBooleanStatusTYPE = ::std::option::Option<
    unsafe extern "C" fn(
        c: fmi2Component,
        s: fmi2StatusKind,
        value: *mut fmi2Boolean,
    ) -> fmi2Status,
>;
pub type fmi2GetStringStatusTYPE = ::std::option::Option<
    unsafe extern "C" fn(c: fmi2Component, s: fmi2StatusKind, value: *mut fmi2String) -> fmi2Status,
>;
extern crate libloading;
pub struct Fmi2Dll {
    __library: ::libloading::Library,
    pub fmi2GetTypesPlatform:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub fmi2GetVersion:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub fmi2SetDebugLogging: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            loggingOn: fmi2Boolean,
            nCategories: usize,
            categories: *const fmi2String,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2Instantiate: Result<
        unsafe extern "C" fn(
            instanceName: fmi2String,
            fmuType: fmi2Type,
            fmuGUID: fmi2String,
            fmuResourceLocation: fmi2String,
            functions: *const fmi2CallbackFunctions,
            visible: fmi2Boolean,
            loggingOn: fmi2Boolean,
        ) -> fmi2Component,
        ::libloading::Error,
    >,
    pub fmi2FreeInstance: Result<unsafe extern "C" fn(c: fmi2Component), ::libloading::Error>,
    pub fmi2SetupExperiment: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            toleranceDefined: fmi2Boolean,
            tolerance: fmi2Real,
            startTime: fmi2Real,
            stopTimeDefined: fmi2Boolean,
            stopTime: fmi2Real,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2EnterInitializationMode:
        Result<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status, ::libloading::Error>,
    pub fmi2ExitInitializationMode:
        Result<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status, ::libloading::Error>,
    pub fmi2Terminate:
        Result<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status, ::libloading::Error>,
    pub fmi2Reset:
        Result<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status, ::libloading::Error>,
    pub fmi2GetReal: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            value: *mut fmi2Real,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetInteger: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            value: *mut fmi2Integer,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetBoolean: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            value: *mut fmi2Boolean,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetString: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            value: *mut fmi2String,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SetReal: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            value: *const fmi2Real,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SetInteger: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            value: *const fmi2Integer,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SetBoolean: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            value: *const fmi2Boolean,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SetString: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            value: *const fmi2String,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetFMUstate: Result<
        unsafe extern "C" fn(c: fmi2Component, FMUstate: *mut fmi2FMUstate) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SetFMUstate: Result<
        unsafe extern "C" fn(c: fmi2Component, FMUstate: fmi2FMUstate) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2FreeFMUstate: Result<
        unsafe extern "C" fn(c: fmi2Component, FMUstate: *mut fmi2FMUstate) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SerializedFMUstateSize: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            FMUstate: fmi2FMUstate,
            size: *mut usize,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SerializeFMUstate: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            FMUstate: fmi2FMUstate,
            serializedState: *mut fmi2Byte,
            size: usize,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2DeSerializeFMUstate: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            serializedState: *const fmi2Byte,
            size: usize,
            FMUstate: *mut fmi2FMUstate,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetDirectionalDerivative: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vUnknown_ref: *const fmi2ValueReference,
            nUnknown: usize,
            vKnown_ref: *const fmi2ValueReference,
            nKnown: usize,
            dvKnown: *const fmi2Real,
            dvUnknown: *mut fmi2Real,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2EnterEventMode:
        Result<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status, ::libloading::Error>,
    pub fmi2NewDiscreteStates: Result<
        unsafe extern "C" fn(c: fmi2Component, fmi2eventInfo: *mut fmi2EventInfo) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2EnterContinuousTimeMode:
        Result<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status, ::libloading::Error>,
    pub fmi2CompletedIntegratorStep: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            noSetFMUStatePriorToCurrentPoint: fmi2Boolean,
            enterEventMode: *mut fmi2Boolean,
            terminateSimulation: *mut fmi2Boolean,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SetTime: Result<
        unsafe extern "C" fn(c: fmi2Component, time: fmi2Real) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SetContinuousStates: Result<
        unsafe extern "C" fn(c: fmi2Component, x: *const fmi2Real, nx: usize) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetDerivatives: Result<
        unsafe extern "C" fn(c: fmi2Component, derivatives: *mut fmi2Real, nx: usize) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetEventIndicators: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            eventIndicators: *mut fmi2Real,
            ni: usize,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetContinuousStates: Result<
        unsafe extern "C" fn(c: fmi2Component, x: *mut fmi2Real, nx: usize) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetNominalsOfContinuousStates: Result<
        unsafe extern "C" fn(c: fmi2Component, x_nominal: *mut fmi2Real, nx: usize) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2SetRealInputDerivatives: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            order: *const fmi2Integer,
            value: *const fmi2Real,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetRealOutputDerivatives: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            vr: *const fmi2ValueReference,
            nvr: usize,
            order: *const fmi2Integer,
            value: *mut fmi2Real,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2DoStep: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            currentCommunicationPoint: fmi2Real,
            communicationStepSize: fmi2Real,
            noSetFMUStatePriorToCurrentPoint: fmi2Boolean,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2CancelStep:
        Result<unsafe extern "C" fn(c: fmi2Component) -> fmi2Status, ::libloading::Error>,
    pub fmi2GetStatus: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            s: fmi2StatusKind,
            value: *mut fmi2Status,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetRealStatus: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            s: fmi2StatusKind,
            value: *mut fmi2Real,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetIntegerStatus: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            s: fmi2StatusKind,
            value: *mut fmi2Integer,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetBooleanStatus: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            s: fmi2StatusKind,
            value: *mut fmi2Boolean,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
    pub fmi2GetStringStatus: Result<
        unsafe extern "C" fn(
            c: fmi2Component,
            s: fmi2StatusKind,
            value: *mut fmi2String,
        ) -> fmi2Status,
        ::libloading::Error,
    >,
}
impl Fmi2Dll {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        unsafe { Self::from_library(library) }
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let fmi2GetTypesPlatform =
            unsafe { __library.get(b"fmi2GetTypesPlatform\0") }.map(|sym| *sym);
        let fmi2GetVersion = unsafe { __library.get(b"fmi2GetVersion\0") }.map(|sym| *sym);
        let fmi2SetDebugLogging =
            unsafe { __library.get(b"fmi2SetDebugLogging\0") }.map(|sym| *sym);
        let fmi2Instantiate = unsafe { __library.get(b"fmi2Instantiate\0") }.map(|sym| *sym);
        let fmi2FreeInstance = unsafe { __library.get(b"fmi2FreeInstance\0") }.map(|sym| *sym);
        let fmi2SetupExperiment =
            unsafe { __library.get(b"fmi2SetupExperiment\0") }.map(|sym| *sym);
        let fmi2EnterInitializationMode =
            unsafe { __library.get(b"fmi2EnterInitializationMode\0") }.map(|sym| *sym);
        let fmi2ExitInitializationMode =
            unsafe { __library.get(b"fmi2ExitInitializationMode\0") }.map(|sym| *sym);
        let fmi2Terminate = unsafe { __library.get(b"fmi2Terminate\0") }.map(|sym| *sym);
        let fmi2Reset = unsafe { __library.get(b"fmi2Reset\0") }.map(|sym| *sym);
        let fmi2GetReal = unsafe { __library.get(b"fmi2GetReal\0") }.map(|sym| *sym);
        let fmi2GetInteger = unsafe { __library.get(b"fmi2GetInteger\0") }.map(|sym| *sym);
        let fmi2GetBoolean = unsafe { __library.get(b"fmi2GetBoolean\0") }.map(|sym| *sym);
        let fmi2GetString = unsafe { __library.get(b"fmi2GetString\0") }.map(|sym| *sym);
        let fmi2SetReal = unsafe { __library.get(b"fmi2SetReal\0") }.map(|sym| *sym);
        let fmi2SetInteger = unsafe { __library.get(b"fmi2SetInteger\0") }.map(|sym| *sym);
        let fmi2SetBoolean = unsafe { __library.get(b"fmi2SetBoolean\0") }.map(|sym| *sym);
        let fmi2SetString = unsafe { __library.get(b"fmi2SetString\0") }.map(|sym| *sym);
        let fmi2GetFMUstate = unsafe { __library.get(b"fmi2GetFMUstate\0") }.map(|sym| *sym);
        let fmi2SetFMUstate = unsafe { __library.get(b"fmi2SetFMUstate\0") }.map(|sym| *sym);
        let fmi2FreeFMUstate = unsafe { __library.get(b"fmi2FreeFMUstate\0") }.map(|sym| *sym);
        let fmi2SerializedFMUstateSize =
            unsafe { __library.get(b"fmi2SerializedFMUstateSize\0") }.map(|sym| *sym);
        let fmi2SerializeFMUstate =
            unsafe { __library.get(b"fmi2SerializeFMUstate\0") }.map(|sym| *sym);
        let fmi2DeSerializeFMUstate =
            unsafe { __library.get(b"fmi2DeSerializeFMUstate\0") }.map(|sym| *sym);
        let fmi2GetDirectionalDerivative =
            unsafe { __library.get(b"fmi2GetDirectionalDerivative\0") }.map(|sym| *sym);
        let fmi2EnterEventMode = unsafe { __library.get(b"fmi2EnterEventMode\0") }.map(|sym| *sym);
        let fmi2NewDiscreteStates =
            unsafe { __library.get(b"fmi2NewDiscreteStates\0") }.map(|sym| *sym);
        let fmi2EnterContinuousTimeMode =
            unsafe { __library.get(b"fmi2EnterContinuousTimeMode\0") }.map(|sym| *sym);
        let fmi2CompletedIntegratorStep =
            unsafe { __library.get(b"fmi2CompletedIntegratorStep\0") }.map(|sym| *sym);
        let fmi2SetTime = unsafe { __library.get(b"fmi2SetTime\0") }.map(|sym| *sym);
        let fmi2SetContinuousStates =
            unsafe { __library.get(b"fmi2SetContinuousStates\0") }.map(|sym| *sym);
        let fmi2GetDerivatives = unsafe { __library.get(b"fmi2GetDerivatives\0") }.map(|sym| *sym);
        let fmi2GetEventIndicators =
            unsafe { __library.get(b"fmi2GetEventIndicators\0") }.map(|sym| *sym);
        let fmi2GetContinuousStates =
            unsafe { __library.get(b"fmi2GetContinuousStates\0") }.map(|sym| *sym);
        let fmi2GetNominalsOfContinuousStates =
            unsafe { __library.get(b"fmi2GetNominalsOfContinuousStates\0") }.map(|sym| *sym);
        let fmi2SetRealInputDerivatives =
            unsafe { __library.get(b"fmi2SetRealInputDerivatives\0") }.map(|sym| *sym);
        let fmi2GetRealOutputDerivatives =
            unsafe { __library.get(b"fmi2GetRealOutputDerivatives\0") }.map(|sym| *sym);
        let fmi2DoStep = unsafe { __library.get(b"fmi2DoStep\0") }.map(|sym| *sym);
        let fmi2CancelStep = unsafe { __library.get(b"fmi2CancelStep\0") }.map(|sym| *sym);
        let fmi2GetStatus = unsafe { __library.get(b"fmi2GetStatus\0") }.map(|sym| *sym);
        let fmi2GetRealStatus = unsafe { __library.get(b"fmi2GetRealStatus\0") }.map(|sym| *sym);
        let fmi2GetIntegerStatus =
            unsafe { __library.get(b"fmi2GetIntegerStatus\0") }.map(|sym| *sym);
        let fmi2GetBooleanStatus =
            unsafe { __library.get(b"fmi2GetBooleanStatus\0") }.map(|sym| *sym);
        let fmi2GetStringStatus =
            unsafe { __library.get(b"fmi2GetStringStatus\0") }.map(|sym| *sym);
        Ok(Fmi2Dll {
            __library,
            fmi2GetTypesPlatform,
            fmi2GetVersion,
            fmi2SetDebugLogging,
            fmi2Instantiate,
            fmi2FreeInstance,
            fmi2SetupExperiment,
            fmi2EnterInitializationMode,
            fmi2ExitInitializationMode,
            fmi2Terminate,
            fmi2Reset,
            fmi2GetReal,
            fmi2GetInteger,
            fmi2GetBoolean,
            fmi2GetString,
            fmi2SetReal,
            fmi2SetInteger,
            fmi2SetBoolean,
            fmi2SetString,
            fmi2GetFMUstate,
            fmi2SetFMUstate,
            fmi2FreeFMUstate,
            fmi2SerializedFMUstateSize,
            fmi2SerializeFMUstate,
            fmi2DeSerializeFMUstate,
            fmi2GetDirectionalDerivative,
            fmi2EnterEventMode,
            fmi2NewDiscreteStates,
            fmi2EnterContinuousTimeMode,
            fmi2CompletedIntegratorStep,
            fmi2SetTime,
            fmi2SetContinuousStates,
            fmi2GetDerivatives,
            fmi2GetEventIndicators,
            fmi2GetContinuousStates,
            fmi2GetNominalsOfContinuousStates,
            fmi2SetRealInputDerivatives,
            fmi2GetRealOutputDerivatives,
            fmi2DoStep,
            fmi2CancelStep,
            fmi2GetStatus,
            fmi2GetRealStatus,
            fmi2GetIntegerStatus,
            fmi2GetBooleanStatus,
            fmi2GetStringStatus,
        })
    }
    pub unsafe fn fmi2GetTypesPlatform(&self) -> *const ::std::os::raw::c_char {
        unsafe {
            (self
                .fmi2GetTypesPlatform
                .as_ref()
                .expect("Expected function, got error."))()
        }
    }
    pub unsafe fn fmi2GetVersion(&self) -> *const ::std::os::raw::c_char {
        unsafe {
            (self
                .fmi2GetVersion
                .as_ref()
                .expect("Expected function, got error."))()
        }
    }
    pub unsafe fn fmi2SetDebugLogging(
        &self,
        c: fmi2Component,
        loggingOn: fmi2Boolean,
        nCategories: usize,
        categories: *const fmi2String,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetDebugLogging
                .as_ref()
                .expect("Expected function, got error."))(
                c, loggingOn, nCategories, categories
            )
        }
    }
    pub unsafe fn fmi2Instantiate(
        &self,
        instanceName: fmi2String,
        fmuType: fmi2Type,
        fmuGUID: fmi2String,
        fmuResourceLocation: fmi2String,
        functions: *const fmi2CallbackFunctions,
        visible: fmi2Boolean,
        loggingOn: fmi2Boolean,
    ) -> fmi2Component {
        unsafe {
            (self
                .fmi2Instantiate
                .as_ref()
                .expect("Expected function, got error."))(
                instanceName,
                fmuType,
                fmuGUID,
                fmuResourceLocation,
                functions,
                visible,
                loggingOn,
            )
        }
    }
    pub unsafe fn fmi2FreeInstance(&self, c: fmi2Component) {
        unsafe {
            (self
                .fmi2FreeInstance
                .as_ref()
                .expect("Expected function, got error."))(c)
        }
    }
    pub unsafe fn fmi2SetupExperiment(
        &self,
        c: fmi2Component,
        toleranceDefined: fmi2Boolean,
        tolerance: fmi2Real,
        startTime: fmi2Real,
        stopTimeDefined: fmi2Boolean,
        stopTime: fmi2Real,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetupExperiment
                .as_ref()
                .expect("Expected function, got error."))(
                c,
                toleranceDefined,
                tolerance,
                startTime,
                stopTimeDefined,
                stopTime,
            )
        }
    }
    pub unsafe fn fmi2EnterInitializationMode(&self, c: fmi2Component) -> fmi2Status {
        unsafe {
            (self
                .fmi2EnterInitializationMode
                .as_ref()
                .expect("Expected function, got error."))(c)
        }
    }
    pub unsafe fn fmi2ExitInitializationMode(&self, c: fmi2Component) -> fmi2Status {
        unsafe {
            (self
                .fmi2ExitInitializationMode
                .as_ref()
                .expect("Expected function, got error."))(c)
        }
    }
    pub unsafe fn fmi2Terminate(&self, c: fmi2Component) -> fmi2Status {
        unsafe {
            (self
                .fmi2Terminate
                .as_ref()
                .expect("Expected function, got error."))(c)
        }
    }
    pub unsafe fn fmi2Reset(&self, c: fmi2Component) -> fmi2Status {
        unsafe {
            (self
                .fmi2Reset
                .as_ref()
                .expect("Expected function, got error."))(c)
        }
    }
    pub unsafe fn fmi2GetReal(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *mut fmi2Real,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetReal
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, value)
        }
    }
    pub unsafe fn fmi2GetInteger(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *mut fmi2Integer,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetInteger
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, value)
        }
    }
    pub unsafe fn fmi2GetBoolean(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *mut fmi2Boolean,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetBoolean
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, value)
        }
    }
    pub unsafe fn fmi2GetString(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *mut fmi2String,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetString
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, value)
        }
    }
    pub unsafe fn fmi2SetReal(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *const fmi2Real,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetReal
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, value)
        }
    }
    pub unsafe fn fmi2SetInteger(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *const fmi2Integer,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetInteger
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, value)
        }
    }
    pub unsafe fn fmi2SetBoolean(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *const fmi2Boolean,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetBoolean
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, value)
        }
    }
    pub unsafe fn fmi2SetString(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        value: *const fmi2String,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetString
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, value)
        }
    }
    pub unsafe fn fmi2GetFMUstate(
        &self,
        c: fmi2Component,
        FMUstate: *mut fmi2FMUstate,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetFMUstate
                .as_ref()
                .expect("Expected function, got error."))(c, FMUstate)
        }
    }
    pub unsafe fn fmi2SetFMUstate(&self, c: fmi2Component, FMUstate: fmi2FMUstate) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetFMUstate
                .as_ref()
                .expect("Expected function, got error."))(c, FMUstate)
        }
    }
    pub unsafe fn fmi2FreeFMUstate(
        &self,
        c: fmi2Component,
        FMUstate: *mut fmi2FMUstate,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2FreeFMUstate
                .as_ref()
                .expect("Expected function, got error."))(c, FMUstate)
        }
    }
    pub unsafe fn fmi2SerializedFMUstateSize(
        &self,
        c: fmi2Component,
        FMUstate: fmi2FMUstate,
        size: *mut usize,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SerializedFMUstateSize
                .as_ref()
                .expect("Expected function, got error."))(c, FMUstate, size)
        }
    }
    pub unsafe fn fmi2SerializeFMUstate(
        &self,
        c: fmi2Component,
        FMUstate: fmi2FMUstate,
        serializedState: *mut fmi2Byte,
        size: usize,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SerializeFMUstate
                .as_ref()
                .expect("Expected function, got error."))(
                c, FMUstate, serializedState, size
            )
        }
    }
    pub unsafe fn fmi2DeSerializeFMUstate(
        &self,
        c: fmi2Component,
        serializedState: *const fmi2Byte,
        size: usize,
        FMUstate: *mut fmi2FMUstate,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2DeSerializeFMUstate
                .as_ref()
                .expect("Expected function, got error."))(
                c, serializedState, size, FMUstate
            )
        }
    }
    pub unsafe fn fmi2GetDirectionalDerivative(
        &self,
        c: fmi2Component,
        vUnknown_ref: *const fmi2ValueReference,
        nUnknown: usize,
        vKnown_ref: *const fmi2ValueReference,
        nKnown: usize,
        dvKnown: *const fmi2Real,
        dvUnknown: *mut fmi2Real,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetDirectionalDerivative
                .as_ref()
                .expect("Expected function, got error."))(
                c,
                vUnknown_ref,
                nUnknown,
                vKnown_ref,
                nKnown,
                dvKnown,
                dvUnknown,
            )
        }
    }
    pub unsafe fn fmi2EnterEventMode(&self, c: fmi2Component) -> fmi2Status {
        unsafe {
            (self
                .fmi2EnterEventMode
                .as_ref()
                .expect("Expected function, got error."))(c)
        }
    }
    pub unsafe fn fmi2NewDiscreteStates(
        &self,
        c: fmi2Component,
        fmi2eventInfo: *mut fmi2EventInfo,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2NewDiscreteStates
                .as_ref()
                .expect("Expected function, got error."))(c, fmi2eventInfo)
        }
    }
    pub unsafe fn fmi2EnterContinuousTimeMode(&self, c: fmi2Component) -> fmi2Status {
        unsafe {
            (self
                .fmi2EnterContinuousTimeMode
                .as_ref()
                .expect("Expected function, got error."))(c)
        }
    }
    pub unsafe fn fmi2CompletedIntegratorStep(
        &self,
        c: fmi2Component,
        noSetFMUStatePriorToCurrentPoint: fmi2Boolean,
        enterEventMode: *mut fmi2Boolean,
        terminateSimulation: *mut fmi2Boolean,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2CompletedIntegratorStep
                .as_ref()
                .expect("Expected function, got error."))(
                c,
                noSetFMUStatePriorToCurrentPoint,
                enterEventMode,
                terminateSimulation,
            )
        }
    }
    pub unsafe fn fmi2SetTime(&self, c: fmi2Component, time: fmi2Real) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetTime
                .as_ref()
                .expect("Expected function, got error."))(c, time)
        }
    }
    pub unsafe fn fmi2SetContinuousStates(
        &self,
        c: fmi2Component,
        x: *const fmi2Real,
        nx: usize,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetContinuousStates
                .as_ref()
                .expect("Expected function, got error."))(c, x, nx)
        }
    }
    pub unsafe fn fmi2GetDerivatives(
        &self,
        c: fmi2Component,
        derivatives: *mut fmi2Real,
        nx: usize,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetDerivatives
                .as_ref()
                .expect("Expected function, got error."))(c, derivatives, nx)
        }
    }
    pub unsafe fn fmi2GetEventIndicators(
        &self,
        c: fmi2Component,
        eventIndicators: *mut fmi2Real,
        ni: usize,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetEventIndicators
                .as_ref()
                .expect("Expected function, got error."))(c, eventIndicators, ni)
        }
    }
    pub unsafe fn fmi2GetContinuousStates(
        &self,
        c: fmi2Component,
        x: *mut fmi2Real,
        nx: usize,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetContinuousStates
                .as_ref()
                .expect("Expected function, got error."))(c, x, nx)
        }
    }
    pub unsafe fn fmi2GetNominalsOfContinuousStates(
        &self,
        c: fmi2Component,
        x_nominal: *mut fmi2Real,
        nx: usize,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetNominalsOfContinuousStates
                .as_ref()
                .expect("Expected function, got error."))(c, x_nominal, nx)
        }
    }
    pub unsafe fn fmi2SetRealInputDerivatives(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        order: *const fmi2Integer,
        value: *const fmi2Real,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2SetRealInputDerivatives
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, order, value)
        }
    }
    pub unsafe fn fmi2GetRealOutputDerivatives(
        &self,
        c: fmi2Component,
        vr: *const fmi2ValueReference,
        nvr: usize,
        order: *const fmi2Integer,
        value: *mut fmi2Real,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetRealOutputDerivatives
                .as_ref()
                .expect("Expected function, got error."))(c, vr, nvr, order, value)
        }
    }
    pub unsafe fn fmi2DoStep(
        &self,
        c: fmi2Component,
        currentCommunicationPoint: fmi2Real,
        communicationStepSize: fmi2Real,
        noSetFMUStatePriorToCurrentPoint: fmi2Boolean,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2DoStep
                .as_ref()
                .expect("Expected function, got error."))(
                c,
                currentCommunicationPoint,
                communicationStepSize,
                noSetFMUStatePriorToCurrentPoint,
            )
        }
    }
    pub unsafe fn fmi2CancelStep(&self, c: fmi2Component) -> fmi2Status {
        unsafe {
            (self
                .fmi2CancelStep
                .as_ref()
                .expect("Expected function, got error."))(c)
        }
    }
    pub unsafe fn fmi2GetStatus(
        &self,
        c: fmi2Component,
        s: fmi2StatusKind,
        value: *mut fmi2Status,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetStatus
                .as_ref()
                .expect("Expected function, got error."))(c, s, value)
        }
    }
    pub unsafe fn fmi2GetRealStatus(
        &self,
        c: fmi2Component,
        s: fmi2StatusKind,
        value: *mut fmi2Real,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetRealStatus
                .as_ref()
                .expect("Expected function, got error."))(c, s, value)
        }
    }
    pub unsafe fn fmi2GetIntegerStatus(
        &self,
        c: fmi2Component,
        s: fmi2StatusKind,
        value: *mut fmi2Integer,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetIntegerStatus
                .as_ref()
                .expect("Expected function, got error."))(c, s, value)
        }
    }
    pub unsafe fn fmi2GetBooleanStatus(
        &self,
        c: fmi2Component,
        s: fmi2StatusKind,
        value: *mut fmi2Boolean,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetBooleanStatus
                .as_ref()
                .expect("Expected function, got error."))(c, s, value)
        }
    }
    pub unsafe fn fmi2GetStringStatus(
        &self,
        c: fmi2Component,
        s: fmi2StatusKind,
        value: *mut fmi2String,
    ) -> fmi2Status {
        unsafe {
            (self
                .fmi2GetStringStatus
                .as_ref()
                .expect("Expected function, got error."))(c, s, value)
        }
    }
}
